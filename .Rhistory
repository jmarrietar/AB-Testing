modelFit$finalModel
modelFit$finalModel
predictions<-predict(modelFit,newdata=testing)
predictions
confusionMatrix(predictions,testing$Type)
confusionMatrix(predictions,testing$type)
folds<-createFolds(y=spam$type,k=10,list=T,returnTrain=T)
folds
sapply(folds,length)
folds[[1]][1:10]
set.seed(32323)
folds<-createResample(y=spam$type,times=10,list=T)
sapply(folds,length)
library(ISLR)
library(ggplot2)
library(caret)
library(ISLR)
library(ggplot2)
library(caret)
install.packages("ISLR")
data(Wage)
library(ISLR)
data(Wage)
data(Wage)
Wage
View(Wage)
summary(Wage)
inTrain<-createDataPartition(y=Wage$wage,p=0.7,list=FALSE)
inTrain<-createDataPartition(y=Wage$wage,p=0.7,list=FALSE)
training<-Wage[inTrain,]
testing<-Wage[-inTrain,]
dim(training)
dim(testing)
featurePlot(x=training[,c("age","education","jobclass")],y=training$wage,plot="pairs")
qplot(age,wage,data=training)
qplot(age,wage,colour=jobclass,data=training)
qq+geom_smooth(method='lm',formula=y~x)
qq<-qplot(age,wage,colour=jobclass,data=training)
qq+geom_smooth(method='lm',formula=y~x)
cutWage<-cut2(training$wage,g=3)
cut2
library(ISLR)
library(ggplot2)
library(caret)
cutWage<-cut2(training$wage,g=3)
install.packages("Hmisc")
library(Hmisc)
#MAKING FACTORSS!  CUT2 Function
cutWage<-cut2(training$wage,g=3)
#MAKING FACTORSS!  CUT2 Function
cutWage<-cut2(training$wage,g=3)
cutWage
table(cutWage)
p1<-qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot"))
p1
t1<-table(cutWage,training$jobclass)
t1
qplot(wage,colour=education,data=training,geom="density")
library(caret);
library(kernlab)
data(spam)
inTrain<-createDataPartition(y=spam$type,p=0.75,list=FALSE)
training<-spam[inTrain,]
testing<-spam[-inTrain,]
hist(training$capitalAve,main="",xlab="ave. capital run length")
mean(training$capitalAve)
sd(training$capitalAve)
trainCapAve<-training$capitalAve
trainCapAveS<-(trainCapAve-mean(trainCapAve))/sd(trainCapAve)
sd(trainCapAves)
sd(trainCapAveS)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
data(AlzheimerDisease)
library(caret)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
View(predictors)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
data(concrete)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(concrete)
plot(trainning$CompressiveStrength,pch=19)
plot(training$CompressiveStrength,pch=19)
plot(testing$CompressiveStrength,pch=19)
View(concrete)
plot(concrete$CompressiveStrength,pch=19)
View(concrete)
plot(concrete$FlyAsh,pch=19)
plot(concrete$FlyAsh,pch=19)
cutFlyAsh<-cut2(concrete$FlyAsh,g=4)
table(cutFlyAsh)
cutFlyAsh<-cut2(concrete$FlyAsh,g=4)
library(ISLR)
library(ggplot2)
library(caret)
library(Hmisc)
cutFlyAsh<-cut2(concrete$FlyAsh,g=4)
table(cutFlyAsh)
cutFlyAsh<-cut2(concrete$FlyAsh,g=3)
table(cutFlyAsh)
cutFlyAsh<-cut2(concrete$FlyAsh,g=3)
table(cutFlyAsh)
p1<-qplot(concrete$CompressiveStrength,data=concrete,fill=cutFlyAsh,geom=c("boxplot"))
p1
p1<-qplot(concrete$CompressiveStrength,data=concrete,fill=cutFlyAsh,geom=c("boxplot"))
p1
p1<-qplot(concrete$CompressiveStrength,data=concrete,color=cutFlyAsh,geom=c("boxplot"))
p1
p1<-qplot(concrete$CompressiveStrength,data=concrete,color=cutFlyAsh)
p1
plot(concrete$CompressiveStrength,color=cutFlyAsh)
p1<-qplot(concrete$CompressiveStrength,data=concrete)
p1
qplot(concrete$CompressiveStrength,data=concrete)
qplot(seq_along(concrete$CompressiveStrength), concrete$CompressiveStrength,data=concrete)
qplot(seq_along(concrete$CompressiveStrength), concrete$CompressiveStrength,data=concrete,colour=cutFlyAsh)
qplot(seq_along(training$CompressiveStrength), training$CompressiveStrength,data=training,colour=cutFlyAsh)
qplot(seq_along(concrete$CompressiveStrength), concrete$CompressiveStrength,data=concrete,colour=cutFlyAsh)
plot(training$CompressiveStrength,pch=19)
qplot(seq_along(concrete$CompressiveStrength), concrete$CompressiveStrength,data=concrete,colour=cutFlyAsh)
qplot(seq_along(training$CompressiveStrength), training$CompressiveStrength,data=training,colour=cutFlyAsh)
qplot(seq_along(training$CompressiveStrength), training$CompressiveStrength,data=training)
p1
qplot(seq_along(training$CompressiveStrength), training$CompressiveStrength,data=training)
cutFlyAshT<-cut2(training$FlyAsh,g=3)
table(cutFlyAshT)
qplot(seq_along(training$CompressiveStrength), training$CompressiveStrength,data=training,colour=cutFlyAshT)
qplot(seq_along(concrete$CompressiveStrength), concrete$CompressiveStrength,data=concrete,colour=cutFlyAsh)
qplot(seq_along(concrete$CompressiveStrength), concrete$FlyAsh,data=concrete,colour=cutFlyAsh)
qplot(concrete$CompressiveStrength, concrete$FlyAsh,data=concrete,colour=cutFlyAsh)
plot(concrete$Superplasticizer,pch=19)
#Question 3
hist(concrete$Superplasticizer,pch=19)
hist(log(concrete$Superplasticizer+1),pch=19)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(adData)
View(training)
TPCA<-training[,c(65.75)]
TPCA<-training[,c(65,75)]
View(TPCA)
TPCA<-training[,c(65:75)]
View(TPCA)
TPCA<-training[,c(60:75)]
View(TPCA)
TPCA<-training[,c(50:73)]
View(TPCA)
TPCA<-training[,c(55:73)]
View(TPCA)
TPCA<-training[,c(58:73)]
View(TPCA)
TPCA<-training[,c(58:69)]
View(TPCA)
TPCA<-training[,c(58:70)]
View(TPCA)
TPCA<-training[,c(58:69)]
View(TPCA)
TPCA<-training[,c(58:69),row.names = FALS]
TPCA<-training[,c(58:69),row.names = FALSE]
TPCA<-training[,c(58:69)]
TPCA$row.names<-null
TPCA$row.names<-NULL
View(TPCA)
TPCA$row.names<-NULL
View(TPCA)
preProc<-preProcess(TPCA,method="pca",pcaComp=2)
preProc<-preProcess(TPCA,method="pca",pcaComp=2)
trainPC<-predict(preProc,TPCA)
modelFit<-train(training$type~.,method="glm",data=TrainPC)
trainPC<-predict(preProc,TPCA)
modelFit<-train(training$type~.,method="glm",data=trainPC)
preProc
trainPC
preProc
preProc
trainPC
summary(trainPC)
preProc<-preProcess(TPCA,method="pca",thresh=0.8)
preProc$rotation
preProc<-preProcess(TPCA,method="pca",thresh=0.8)
preProc$rotation
#Question 4
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
TPCA<-training[,c(58:69)]
preProc<-preProcess(TPCA,method="pca",thresh=0.8)
preProc$rotation
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
trainingP<-training[,c(1,58:69)]
View(trainingP)
testing
View(testing)
testing
View(testing)
testing$Type,
testing$Type
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
testing$Type
testing$type
training$type
preProc
trainPC
trainPC<-predict(preProc,TPCA)
trainPC
modelFit<-train(training$type~.,method="glm",data=trainPC)
View(trainPC)
View(training)
modelFit<-train(training$diagnosis~.,method="glm",data=trainPC)
testPC<-predict(preProc,testing[,-58])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
testPC<-predict(preProc,testing[,-58])
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingP<-training[,c(1,58:69)]
View(trainingP)
trainPC
preProc<-preProcess(trainingP,method="pca",thresh=0.8)
preProc<-preProcess(trainingP[,-1],method="pca",thresh=0.8)
trainPC<-predict(preProc,trainingP)
trainPC<-predict(preProc,trainingP[,-1])
preProc<-preProcess(trainingP[,-1],method="pca",thresh=0.8)
trainPC<-predict(preProc,trainingP[,-1])
modelFit<-train(training$diagnosis~.,method="glm",data=trainPC)
View(testing)
testPC<-predict(preProc,testing[,-1])
trainingP<-training[,c(1,58:69)]
testingP<-testing[,c(1,58:69)]
testPC<-predict(preProc,testingP[,-1])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
trainPC
modelFit1<-train(training$diagnosis~.,method="glm",data=training[-1])
modelFit1
confusionMatrix(testing$diagnosis,predict(modelFit1,testingP[,-1]))
confusionMatrix(testingP$diagnosis,predict(modelFit,testPC))
#one using PCA with principal components explaining 80% of the variance in the predictors.
preProc<-preProcess(trainingP[,-1],method="pca",thresh=0.8)
trainPC<-predict(preProc,trainingP[,-1])
modelFit<-train(training$diagnosis~.,method="glm",data=trainPC)
testPC<-predict(preProc,testingP[,-1])
confusionMatrix(testingP$diagnosis,predict(modelFit,testPC))
modelFit1<-train(trainingP$diagnosis~.,method="glm",data=trainingP[-1])
confusionMatrix(testingP$diagnosis,predict(modelFit1,testingP[,-1]))
Mtarix1<-confusionMatrix(testingP$diagnosis,predict(modelFit1,testingP[,-1]))
Matrix2<-confusionMatrix(testingP$diagnosis,predict(modelFit,testPC))
preProc
trainPC
preProc
Mtarix1
Matrix2
clear
data(iris)
library(ggplot2)
names(iris)
View(iris)
names(iris)
inTrain<-createDataPartition(y=iris$Species,p=0.7,list=FALSE)
training<-iris[inTrain,]
testing<-iris[-inTrain,]
inTrain<-createDataPartition(y=iris$Species,p=0.7,list=FALSE)
library(caret)
inTrain<-createDataPartition(y=iris$Species,p=0.7,list=FALSE)
training<-iris[inTrain,]
testing<-iris[-inTrain,]
dim(training)
dim(testing)
qplot(Petal.Width,Sepal.Width,colour=Species,data=training)
modFit<-train(Species~.,method="rpart",data=training)
modFit<-train(Species~.,method="rpart",data=training)
print(modFit$finalModel)
plot(modFit$finalModel,uniform=TRUE,main="Classification Trea")
test(modFit$finalModel,use.n=T,all=T,cex=0.8)
text(modFit$finalModel,use.n=T,all=T,cex=0.8)
text(modFit$finalModel,use.n=T,all=T,cex=0.5)
plot(modFit$finalModel,uniform=TRUE,main="Classification Trea")
text(modFit$finalModel,use.n=T,all=T,cex=0.5)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(ozone,package="ElemStatLearn")
head(ozone)
inTrain<-createDataPartition(y=iris$Species,p=0.7,list=FALSE)
training<-iris[inTrain,]
testing<-iris[-inTrain,]
inTrain<-createDataPartition(y=iris$Species,p=0.7,list=FALSE)
library(caret)
data(iris)
inTrain<-createDataPartition(y=iris$Species,p=0.7,list=FALSE)
training<-iris[inTrain,]
testing<-iris[-inTrain,]
modFit<-train(Species~.,data=training,method="rf",prox=TRUE)
modFit
getTree(modFit$finalModel,k=2)
rownames(irisP)
irisP<-classCenter(training[,c(3,4)],training$Species,modFit$finalModel$prox)
irisPz<-as.data.frame(irisP)
irisP<-classCenter(training[,c(3,4)],training$Species,modFit$finalModel$prox)
irisP<-as.data.frame(irisP)
View(irisP)
rownames(irisP)
View(irisP)
irisP$Species<-rownames(irisP)
View(irisP)
p<-qplot(Pedal.Width,Petal.Length,col=Species,data=training)
p
qplot(Pedal.Width,Petal.Length,col=Species,data=training)
p<-qplot(Petal.Width,Petal.Length,col=Species,data=training)
p
p+geom_point(aes(x=Petal.Width,y=Petal.Length,col=Species),size=5,shape=4,data=irisP)
View(testing)
pred<-predict(modFit,testing)
testing$predRight<-pred==testing$Species
table(pred,testing$Species)
table(pred,testing$Species)
testing$predRight<-pred==testing$Species
View(testing)
qplot(Petal.Width,Petal.length,colour=predRightmdata=testing,main="newdata Predictions")
qplot(Petal.Width,Petal.length,colour=predRight,data=testing,main="newdata Predictions")
qplot(Petal.Width,Petal.Length,colour=predRight,data=testing,main="newdata Predictions")
setwd("C:/Users/Alfonso/Desktop/JOM/AB-Testing")
Delivery_Data<-read.csv("Delivery_Data_problem.csv",header=T)
View(Delivery_Data)
sort(table(Delivery_Data$pickup_name))
Safeway<-subset(Delivery_Data, pickup_name=="Safeway")
View(Safeway)
colnames(Delivery_Data)
sort(table(Safeway$dropoff_zipcode))
sort(table(Safeway$pickup_zipcode))
Safeway<-subset(Delivery_Data, pickup_name=="Safeway")
sort(table(Safeway$pickup_zipcode))
Safeway<-subset(Delivery_Data, pickup_name=="Safeway")
sort(table(Safeway$dropoff_zipcode))
sort(table(Safeway$pickup_zipcode))
Whole_Foods_Market<-subset(Delivery_Data, pickup_name=="Whole_Foods_Market")
sort(table(Whole_Foods_Market$pickup_zipcode))
Whole_Foods_Market<-subset(Delivery_Data, pickup_name=="Whole_Foods_Market")
Whole_Foods_Market<-subset(Delivery_Data, pickup_name=="Whole Foods Market")
sort(table(Whole_Foods_Market$pickup_zipcode))
Whole_Foods_Market<-subset(Delivery_Data, pickup_name=="Whole Foods Market")
View(Whole_Foods_Market)
sort(table(Whole_Foods_Market$pickup_zipcode))
mean(as.integer((Delivery_Data[Delivery_Data[,13]>0,])[,15]))
mean(as.integer((Delivery_Data[Delivery_Data[,13]>0,])[,15]),na.rm=TRUE)
mean(as.integer((Delivery_Data[Delivery_Data[,13]>0,])[,15]),na.rm=TRUE)
View(Delivery_Data)
mean(as.integer((Delivery_Data[Delivery_Data[,13]>0,])[,15]),na.rm=TRUE)
str(Delivery_Data)
((Delivery_Data[Delivery_Data[,13]>0,])[,15])
str(Delivery_Data)
table(Delivery_Data[,15])
table(as.integer(Delivery_Data[,15]))
table(as.integer(Delivery_Data[,15],na.rm=TRUE))
Delivery_Data$rating_by_customer[Delivery_Data$rating_by_customer=="None"] <- NA
mean(as.integer((Delivery_Data[Delivery_Data[,13]>0,])[,15]),na.rm=TRUE)
mean(as.integer((Delivery_Data[Delivery_Data[,13]==0,])[,15]),na.rm=TRUE)
sort(table(Safeway$pickup_zipcode))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
View(segmentationOriginal)
intrain<-createDataPartition(y=iris$Species,p=0.7,list=F)
data(segmentationOriginal)
data(segmentationOriginal)
training<-subset(segmentationOriginal,Case=="Train")
testing<-subset(segmentationOriginal,Case=="Test")
training<-subset(segmentationOriginal,Case=="Train")
testing<-subset(segmentationOriginal,Case=="Test")
View(testing)
set.seed(125)
modFit<-train(Case~.,method="rpart",data=training)
print(modFit$finalModel)
library(caret)
modFit<-train(Case~.,method="rpart",data=training)
View(training)
modFit<-train(Case~.,method="rpart",data=training)
training<-subset(segmentationOriginal,Case=="Train")
testing<-subset(segmentationOriginal,Case=="Test")
set.seed(125)
modFit<-train(Case~.,method="rpart",data=training)
modFit<-train(Case~.,method="rpart",data=training)
modFit<-train(Species~.,method="rpart",data=training)
data(iris)
library(ggplot2)
names(iris)
library(caret)
#Create Training and test Sets
inTrain<-createDataPartition(y=iris$Species,p=0.7,list=FALSE)
training<-iris[inTrain,]
testing<-iris[-inTrain,]
modFit<-train(Species~.,method="rpart",data=training)
modFit<-train(Class~.,method="rpart",data=training)
#Question1
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
training<-subset(segmentationOriginal,Case=="Train")
testing<-subset(segmentationOriginal,Case=="Test")
set.seed(125)
modFit<-train(Class~.,method="rpart",data=training)
#Prettier Plots
library(rattle)
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
#Prettier Plots
library(rattle)
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
predict(modFit,newdata=testing)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
View(olive)
modFit<-train(Area~.,method="rpart",data=olive)
newdata = as.data.frame(t(colMeans(olive)))
View(newdata)
olive = olive[,-1]
View(olive)
modFit<-train(Area~.,method="rpart",data=olive)
library(pgmm)
data(olive)
olive = olive[,-1]
View(olive)
data(olive)
View(olive)
olive = olive[,-1]
View(olive)
modFit<-train(Area~.,method="rpart",data=olive)
modFit<-train(Area~.,method="rpart",data=olive)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train
vowel.test
View(vowel.test)
str(train)
str(vowel.train)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
modFit<-train(y~.,data=vowel.train,method="rf",prox=TRUE)
modFit
View(vowel.test)
gbmImp <- varImp(modFit, scale = FALSE)
gbmImp
gbmImp <- varImp(modFit, useModel =TRUE )
gbmImp
gbmImp <- varImp(modFit, useModel =F)
gbmImp
gbmImp <- varImp(modFit)
gbmImp
gbmImp <- varImp(modFit,value=rss)
gbmImp
gbmImp <- varImp(modFit,value=gcv)
gbmImp
gbmImp <- varImp(modFit,value=nsubsets)
gbmImp
