install.packages("KernSmooth")
require("KernSmooth")
require(KernSmooth)
load(KernSmooth)
library(KernSmooth)
library (KernSmooth)
install.packages("KernSmooth")
library(KernSmooth)
library(data.table)
library(KernSmooth)
require("XML")
library(KernSmooth)
install.packages("KernSmooth")
library(KernSmooth
library(data.table)
library(KernSmooth)
library(caret);
install.packages("caret")
library(kernlab)
install.packages("kernlab")
data(spam)
library(kernlab)
data(spam)
View(spam)
inTrain<-createDataPartition(y=spam$type,p=0.75,list=FALSE)
inTrain<-createDataPartition(y=spam$type,p=0.75,list=FALSE)
library(caret);
library(kernlab)
data(spam)
inTrain<-createDataPartition(y=spam$type,p=0.75,list=FALSE)
inTrain
View(inTrain)
spam[inTrain,]
inTrain
spam[-inTrain,]
View(inTrain)
training<-spam[inTrain,]
testing<-spam[-inTrain,]
dim(training)
modelFit<-train(type -.,data=training,method="glm")
modelFit<-train(type ~.,data=training,method="glm")
modelFit
modelFit<-train(type ~.,data=training,method="glm")
set.seed(32343)
modelFit<-train(type ~.,data=training,method="glm")
install.packages('e1071', dependencies=TRUE)
modelFit<-train(type ~.,data=training,method="glm")
modelFit
modelfit$finalModel
modelFit$finalModel
modelFit$finalModel
modelFit$finalModel
predictions<-predict(modelFit,newdata=testing)
predictions
confusionMatrix(predictions,testing$Type)
confusionMatrix(predictions,testing$type)
folds<-createFolds(y=spam$type,k=10,list=T,returnTrain=T)
folds
sapply(folds,length)
folds[[1]][1:10]
set.seed(32323)
folds<-createResample(y=spam$type,times=10,list=T)
sapply(folds,length)
library(ISLR)
library(ggplot2)
library(caret)
library(ISLR)
library(ggplot2)
library(caret)
install.packages("ISLR")
data(Wage)
library(ISLR)
data(Wage)
data(Wage)
Wage
View(Wage)
summary(Wage)
inTrain<-createDataPartition(y=Wage$wage,p=0.7,list=FALSE)
inTrain<-createDataPartition(y=Wage$wage,p=0.7,list=FALSE)
training<-Wage[inTrain,]
testing<-Wage[-inTrain,]
dim(training)
dim(testing)
featurePlot(x=training[,c("age","education","jobclass")],y=training$wage,plot="pairs")
qplot(age,wage,data=training)
qplot(age,wage,colour=jobclass,data=training)
qq+geom_smooth(method='lm',formula=y~x)
qq<-qplot(age,wage,colour=jobclass,data=training)
qq+geom_smooth(method='lm',formula=y~x)
cutWage<-cut2(training$wage,g=3)
cut2
library(ISLR)
library(ggplot2)
library(caret)
cutWage<-cut2(training$wage,g=3)
install.packages("Hmisc")
library(Hmisc)
#MAKING FACTORSS!  CUT2 Function
cutWage<-cut2(training$wage,g=3)
#MAKING FACTORSS!  CUT2 Function
cutWage<-cut2(training$wage,g=3)
cutWage
table(cutWage)
p1<-qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot"))
p1
t1<-table(cutWage,training$jobclass)
t1
qplot(wage,colour=education,data=training,geom="density")
library(caret);
library(kernlab)
data(spam)
inTrain<-createDataPartition(y=spam$type,p=0.75,list=FALSE)
training<-spam[inTrain,]
testing<-spam[-inTrain,]
hist(training$capitalAve,main="",xlab="ave. capital run length")
mean(training$capitalAve)
sd(training$capitalAve)
trainCapAve<-training$capitalAve
trainCapAveS<-(trainCapAve-mean(trainCapAve))/sd(trainCapAve)
sd(trainCapAves)
sd(trainCapAveS)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
data(AlzheimerDisease)
library(caret)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
View(predictors)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
data(concrete)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(concrete)
plot(trainning$CompressiveStrength,pch=19)
plot(training$CompressiveStrength,pch=19)
plot(testing$CompressiveStrength,pch=19)
View(concrete)
plot(concrete$CompressiveStrength,pch=19)
View(concrete)
plot(concrete$FlyAsh,pch=19)
plot(concrete$FlyAsh,pch=19)
cutFlyAsh<-cut2(concrete$FlyAsh,g=4)
table(cutFlyAsh)
cutFlyAsh<-cut2(concrete$FlyAsh,g=4)
library(ISLR)
library(ggplot2)
library(caret)
library(Hmisc)
cutFlyAsh<-cut2(concrete$FlyAsh,g=4)
table(cutFlyAsh)
cutFlyAsh<-cut2(concrete$FlyAsh,g=3)
table(cutFlyAsh)
cutFlyAsh<-cut2(concrete$FlyAsh,g=3)
table(cutFlyAsh)
p1<-qplot(concrete$CompressiveStrength,data=concrete,fill=cutFlyAsh,geom=c("boxplot"))
p1
p1<-qplot(concrete$CompressiveStrength,data=concrete,fill=cutFlyAsh,geom=c("boxplot"))
p1
p1<-qplot(concrete$CompressiveStrength,data=concrete,color=cutFlyAsh,geom=c("boxplot"))
p1
p1<-qplot(concrete$CompressiveStrength,data=concrete,color=cutFlyAsh)
p1
plot(concrete$CompressiveStrength,color=cutFlyAsh)
p1<-qplot(concrete$CompressiveStrength,data=concrete)
p1
qplot(concrete$CompressiveStrength,data=concrete)
qplot(seq_along(concrete$CompressiveStrength), concrete$CompressiveStrength,data=concrete)
qplot(seq_along(concrete$CompressiveStrength), concrete$CompressiveStrength,data=concrete,colour=cutFlyAsh)
qplot(seq_along(training$CompressiveStrength), training$CompressiveStrength,data=training,colour=cutFlyAsh)
qplot(seq_along(concrete$CompressiveStrength), concrete$CompressiveStrength,data=concrete,colour=cutFlyAsh)
plot(training$CompressiveStrength,pch=19)
qplot(seq_along(concrete$CompressiveStrength), concrete$CompressiveStrength,data=concrete,colour=cutFlyAsh)
qplot(seq_along(training$CompressiveStrength), training$CompressiveStrength,data=training,colour=cutFlyAsh)
qplot(seq_along(training$CompressiveStrength), training$CompressiveStrength,data=training)
p1
qplot(seq_along(training$CompressiveStrength), training$CompressiveStrength,data=training)
cutFlyAshT<-cut2(training$FlyAsh,g=3)
table(cutFlyAshT)
qplot(seq_along(training$CompressiveStrength), training$CompressiveStrength,data=training,colour=cutFlyAshT)
qplot(seq_along(concrete$CompressiveStrength), concrete$CompressiveStrength,data=concrete,colour=cutFlyAsh)
qplot(seq_along(concrete$CompressiveStrength), concrete$FlyAsh,data=concrete,colour=cutFlyAsh)
qplot(concrete$CompressiveStrength, concrete$FlyAsh,data=concrete,colour=cutFlyAsh)
plot(concrete$Superplasticizer,pch=19)
#Question 3
hist(concrete$Superplasticizer,pch=19)
hist(log(concrete$Superplasticizer+1),pch=19)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(adData)
View(training)
TPCA<-training[,c(65.75)]
TPCA<-training[,c(65,75)]
View(TPCA)
TPCA<-training[,c(65:75)]
View(TPCA)
TPCA<-training[,c(60:75)]
View(TPCA)
TPCA<-training[,c(50:73)]
View(TPCA)
TPCA<-training[,c(55:73)]
View(TPCA)
TPCA<-training[,c(58:73)]
View(TPCA)
TPCA<-training[,c(58:69)]
View(TPCA)
TPCA<-training[,c(58:70)]
View(TPCA)
TPCA<-training[,c(58:69)]
View(TPCA)
TPCA<-training[,c(58:69),row.names = FALS]
TPCA<-training[,c(58:69),row.names = FALSE]
TPCA<-training[,c(58:69)]
TPCA$row.names<-null
TPCA$row.names<-NULL
View(TPCA)
TPCA$row.names<-NULL
View(TPCA)
preProc<-preProcess(TPCA,method="pca",pcaComp=2)
preProc<-preProcess(TPCA,method="pca",pcaComp=2)
trainPC<-predict(preProc,TPCA)
modelFit<-train(training$type~.,method="glm",data=TrainPC)
trainPC<-predict(preProc,TPCA)
modelFit<-train(training$type~.,method="glm",data=trainPC)
preProc
trainPC
preProc
preProc
trainPC
summary(trainPC)
preProc<-preProcess(TPCA,method="pca",thresh=0.8)
preProc$rotation
preProc<-preProcess(TPCA,method="pca",thresh=0.8)
preProc$rotation
#Question 4
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
TPCA<-training[,c(58:69)]
preProc<-preProcess(TPCA,method="pca",thresh=0.8)
preProc$rotation
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
trainingP<-training[,c(1,58:69)]
View(trainingP)
testing
View(testing)
testing
View(testing)
testing$Type,
testing$Type
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
testing$Type
testing$type
training$type
preProc
trainPC
trainPC<-predict(preProc,TPCA)
trainPC
modelFit<-train(training$type~.,method="glm",data=trainPC)
View(trainPC)
View(training)
modelFit<-train(training$diagnosis~.,method="glm",data=trainPC)
testPC<-predict(preProc,testing[,-58])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
testPC<-predict(preProc,testing[,-58])
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingP<-training[,c(1,58:69)]
View(trainingP)
trainPC
preProc<-preProcess(trainingP,method="pca",thresh=0.8)
preProc<-preProcess(trainingP[,-1],method="pca",thresh=0.8)
trainPC<-predict(preProc,trainingP)
trainPC<-predict(preProc,trainingP[,-1])
preProc<-preProcess(trainingP[,-1],method="pca",thresh=0.8)
trainPC<-predict(preProc,trainingP[,-1])
modelFit<-train(training$diagnosis~.,method="glm",data=trainPC)
View(testing)
testPC<-predict(preProc,testing[,-1])
trainingP<-training[,c(1,58:69)]
testingP<-testing[,c(1,58:69)]
testPC<-predict(preProc,testingP[,-1])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
trainPC
modelFit1<-train(training$diagnosis~.,method="glm",data=training[-1])
modelFit1
confusionMatrix(testing$diagnosis,predict(modelFit1,testingP[,-1]))
confusionMatrix(testingP$diagnosis,predict(modelFit,testPC))
#one using PCA with principal components explaining 80% of the variance in the predictors.
preProc<-preProcess(trainingP[,-1],method="pca",thresh=0.8)
trainPC<-predict(preProc,trainingP[,-1])
modelFit<-train(training$diagnosis~.,method="glm",data=trainPC)
testPC<-predict(preProc,testingP[,-1])
confusionMatrix(testingP$diagnosis,predict(modelFit,testPC))
modelFit1<-train(trainingP$diagnosis~.,method="glm",data=trainingP[-1])
confusionMatrix(testingP$diagnosis,predict(modelFit1,testingP[,-1]))
Mtarix1<-confusionMatrix(testingP$diagnosis,predict(modelFit1,testingP[,-1]))
Matrix2<-confusionMatrix(testingP$diagnosis,predict(modelFit,testPC))
preProc
trainPC
preProc
Mtarix1
Matrix2
clear
duplicates<-duplicated(class_data$A.Year)
duplicates[1:10]
quiz_class_data<-read.csv('classes_test.csv',header=TRUE)
#List of students that are not in both Classes
my_vector<-c(1,2,3,4,5)
my_logical_vector<-c(TRUE,TRUE,FALSE,FALSE,FALSE)
my_vector[my_logical_vector]
#Note-> The vector index and the logical vector must be the same length.
quiz_matches<-quiz_class_data$A %in% quiz_class_data$B
quiz_class_data$A[!quiz_matches]
#Which() Explained
#Select indices of a true condition.
#Select class A of the Data set.
class_A<-quiz_class_data[,c(1,2)]
class_B<-quiz_class_data[,c(3,4)]
soph_rows<-which(class_A$A.Year=='Sophomore')
#We can use the index returned to return only the sophomores in the class.
sophomores <- class_A[soph_rows,]
which(class_A$A.Year=='Junior' | class_A$A.Year=='Senior')
JunB<-which(class_B$B.Year=='Junior')
LenJB<-nrow(class_B[JunB,])
JunA<-which(class_A$A.Year=='Junior')
LenJA<-nrow(class_A[JunA,])
LenJA-LenJB
length(which(class_A$A.Year=='Junior'))-length(which(class_B$B.Year=='Junior')
#DUPLICATE() EXPLAINED
#Determines which elements of a vector or data frame
#are duplicated and returns a logical vector.
duplicates<-duplicated(class_data$A.Year)
duplicates[1:10]
duplicates<-duplicated(class_data$A.Year)
quiz_class_data<-read.csv('classes_test.csv',header=TRUE)
quiz_class_data<-read.csv('classes_test.csv',header=TRUE)
setwd("C:/Users/Alfonso/Desktop/JOM/AB-Testing")
quiz_class_data<-read.csv('classes_test.csv',header=TRUE)
duplicates<-duplicated(quiz_class_data$A.Year)
duplicates[1:10]
class_data<-read.csv('classes.csv',header=TRUE)
duplicates<-duplicated(class_data$A.Year)
duplicates[1:10]
